Exam topics include:
Accessing Data
Use FORMATTED and LIST input to read raw data files.
Use INFILE statement options to control processing when reading raw data files.
Use various components of an INPUT statement to process raw data files including column and line pointer controls, and trailing @ controls.
Combine SAS data sets.
Access an Excel workbook.
Creating Data Structures
Create temporary and permanent SAS data sets.
Create and manipulate SAS date values.
Export data to create standard and comma-delimited raw data files.
Control which observations and variables in a SAS data set are processed and output.
Managing Data
Investigate SAS data libraries using base SAS utility procedures.
Sort observations in a SAS data set.
Conditionally execute SAS statements.
Use assignment statements in the DATA step.
Modify variable attributes using options and statements in the DATA step.
Accumulate sub-totals and totals using DATA step statements.
Use SAS functions to manipulate character data, numeric data, and SAS date values.
Use SAS functions to convert character data to numeric and vice versa.
Process data using DO LOOPS.
Process data using SAS arrays.
Validate and clean data.
Generating Reports
Generate list reports using the PRINT procedure.
Generate summary reports and frequency tables using base SAS procedures.
Enhance reports through the use of user-defined formats, titles, footnotes and SAS System reporting.
Generate reports using ODS statements.
Handling Errors
Identify and resolve programming logic errors.
Recognize and correct syntax errors.
Examine and resolve data errors.

P1-------------------------------------------

SAS Data Sets
1.Descriptor Portion
2.Data Portion

The CONTENTS procedure displays the descriptor portion of a SAS data set.

The descriptor portion contains the metadata of the data set.

There are two types of variables:
1.character contain any value: letters, numbers, special
characters, and blanks. Character values
are stored with a length of 1 to 32,767
bytes. One byte equals one character.
2.numeric stored as floating point numbers in 8 bytes
of storage by default. Eight bytes of floating
point storage provide space for 16 or 17
significant digits. You are not restricted to
8 digits.

SAS names
􀂄 can be 32 characters long.
􀂄 can be uppercase, lowercase, or mixed-case.
􀂄 must start with a letter or underscore. Subsequent
characters can be letters, underscores, or numeric
digits.

SAS stores date values as numeric values.
A SAS date value is stored as the number of days between
January 1, 1960, and a specific date.

A character missing value is displayed as a blank.
A numeric missing value is displayed as a period.

SAS statements
􀂄 usually begin with an identifying keyword
􀂄 always end with a semicolon

Avoid placing the /* comment symbols in columns 1 and 2. On some
operating environments, SAS may interpret these symbols as a request to end
the SAS job or session.

An additional method used for commenting one line of code is to use the
asterisk at the beginning of the comment. Everything that is between the
asterisk and the semicolon is a comment.

What are the two major parts of SAS output?  SAS Log and Output

Syntax errors include
􀂄 misspelled keywords
􀂄 missing or invalid punctuation
􀂄 invalid options.

When SAS encounters a syntax error, SAS underlines the error and the following
information is written to the SAS log:
• the word ERROR or WARNING
• the location of the error
• an explanation of the error.

When you make changes to the program in the Enhanced Editor and have not
saved the new version of the program, the window bar and the top border of
the window reflect that you changed the program without saving it by putting
an asterisk (*) beside the window name. When you save the program, the *
disappears.

A SAS data library is a collection of SAS files that are recognized as a unit by SAS.

You can use the LIBNAME statement to assign a libref to a SAS data library

Rules for naming a libref:
􀂄 must be 8 characters or less
􀂄 must begin with a letter or underscore
􀂄 remaining characters are letters, numbers, or
underscores.

Use the _ALL_ keyword to list all the SAS files in the library
and the NODS option to suppress the descriptor portions of
the data sets.
General form of the NODS option:
NODS must be used in conjunction with the keyword _ALL_.
PROC CONTENTS DATA=libref._ALL_ NODS;
RUN;

Use the PAGEBY statement to put each subgroup on a separate page.(PRINT)
proc print data=work.empdata;
by JobCode;
pageby JobCode;
sum Salary;
run;
The PAGEBY statement must be used with a BY statement.



When the ID and BY statements specify the same variable,(PRINT)
proc sort data=ia.empdata out=work.empdata;
by JobCode;
run;
proc print data=work.empdata;
by JobCode;
id JobCode;
sum Salary;
run;
􀂄 the Obs column is suppressed
􀂄 the BY line is suppressed
􀂄 the ID/BY variable prints in the leftmost column
􀂄 each ID/BY value only prints at the start of each BY group (and on the subtotal line, if a SUM statement is used).


WHERE STATEMENT
LIKE selects observations by comparing character
values to specified patterns.
A percent sign (%) replaces any number of characters.
An underscore (_) replaces one character

The sounds like (=*) operator selects observations that
contain spelling variations of the word or words
specified.
Selects names like SMYTHE and SMITT.

Defining Titles and Footnotes
Features of titles:
􀂄 Titles appear at the top of the page.
􀂄 The default title is The SAS System.
􀂄 The value of n can be from 1 to 10.
􀂄 An unnumbered TITLE is equivalent to TITLE1.
􀂄 Titles remain in effect until they are changed,
cancelled, or you end your SAS session.
􀂄 The null TITLE statement, title;, cancels all titles.

'label' specifies a label up to 256 characters.

PROC FORMAT;
VALUE format-name range1='label '
range2='label '
. . . ;
RUN;

Format-name
􀂄 names the format you are creating
􀂄 cannot be more than 32 characters in SAS System 9
􀂄 for character values, must have a dollar sign ($) as the first character,
a letter or underscore as the second character
􀂄 for numeric values, must have a letter or underscore
as the first character
􀂄 cannot end in a number
􀂄 cannot be the name of a SAS format

Labels
􀂄 can be up to 32,767 characters in length
􀂄 are typically enclosed in quotes, although it is not
required.
Range(s)
􀂄 can be single values
􀂄 ranges of values.
􀂄 does not end with a period in the VALUE statement

Selected Informats
$8. reads 8 columns of character data and removes
leading blanks
$CHAR8. reads 8 columns of character data and preserves
leading blanks.

SAS detects data errors when
􀂄 the INPUT statement encounters invalid data in a field
􀂄 illegal arguments are used in functions
􀂄 impossible mathematical operations are requested

When SAS encounters a data error,
1. a note that describes the error is printed in the
SAS log
2. the input record being read is displayed in the
SAS log (contents of the input buffer)
3. the values in the SAS observation being created
are displayed in the SAS log (contents of the PDV)
4. a missing value is assigned to the appropriate
SAS variable
5. execution continues.


Use LABEL and FORMAT statements in the
􀂄 PROC step to temporarily assign the attributes (for the
duration of the step only)
􀂄 DATA step to permanently assign the attributes
(stored in the data set descriptor portion).

The DATASETS Procedure
PROC DATASETS LIBRARY=libref ;
MODIFY SAS-data-set ;
RENAME old-name-1=new-name-1
<. . . old-name-n=new-name-n>;
LABEL variable-1='label-1'
<. . . variable-n='label-n'>;
FORMAT variable-list-1 format-1
<. . . variable-list-n format-n>;
INFORMAT variable-list-1 informat-1
<. . . variable-list-n informat-n>;
RUN;

PROC IMPORT OUT=WORK.dfwlax
DATAFILE="C:\workshop\winsas\prog1\DallasLA.xls"
DBMS=EXCEL REPLACE;
SHEET="DFWLAX";
GETNAMES=YES;
MIXED=NO;
SCANTEXT=YES;
USEDATE=YES;
SCANTIME=YES;
RUN;

Creating a Frequency Report
By default, PROC FREQ
􀂄 analyzes every variable in the SAS data set
􀂄 displays each distinct data value
􀂄 calculates the number of observations in which each
data value appears (and the corresponding
percentage)
􀂄 indicates for each variable how many observations
have missing values.

Use the TABLES statement to limit the variables included
in the frequency counts. These are typically variables that
have a limited number of distinct values.
General form of a PROC FREQ step with a TABLES
statement:
PROC FREQ DATA=SAS-data-set;
TABLES SAS-variables < / options >;
RUN;

Crosstabular Frequency Reports
To display the crosstabulation results in a listing form,
add the CROSSLIST option to the TABLES statement.
proc freq data=ia.crew;
tables JobCode*Location / crosslist;
title 'Location Distribution for Job Codes';
run;

PROC MEANS step
By default, PROC MEANS
􀂄 analyzes every numeric variable in the
SAS data set
􀂄 prints the statistics N, MEAN, STD, MIN, and MAX
􀂄 excludes missing values before calculating statistics.

PROC REPORT

PROC REPORT enables you to
􀂄 create listing reports
􀂄 create summary reports
􀂄 enhance reports
􀂄 request separate subtotals and grand totals
􀂄 generate reports in an interactive point-and-click or
programming environments.

WINDOWS | WD invokes the procedure in an
interactive REPORT window
(default).
NOWINDOWS | NOWD displays the report in the
OUTPUT window.

proc report data=ia.crew nowd;
run;

You can use a COLUMN statement to
􀂄 select the variables to appear in the report
􀂄 order the variables in the report.

proc report data=ia.crew nowd;
column JobCode Location Salary;
define JobCode / group width=8 'Job Code';
define Location / group 'Home Base';
define Salary / format=dollar10.;
rbreak after / summarize dol;
run;

P2-------------------------------------------

All SAS variables have three required attributes:
􀂄 name
􀂄 type
􀂄 length.

data army navy airforce marines;
drop Type;
set prog2.military;
select (Type);
when ('Army') output army;
when ('Naval') output navy;
when ('Air Force') output airforce;
when ('Marine') output marines;
otherwise;
end;
run;

ODS
ODS HTML FILE='HTML-file-specification' <options>;
SAS code that generates output
ODS HTML CLOSE;

The ODS CSVALL statement creates a comma-delimited
file from output objects with these characteristics:
􀂃 values containing letters or special characters are
enclosed in double quotes
􀂃 titles and footnotes are preserved.

ods csvall file='raw-data-file';
title1;
footnote1 ‘Data: PROG2.MAYSALES';
proc print noobs data=prog2.maysales;
format listdate
selldate date9.;
run;
ods csvall close;


The FSLIST procedure enables you to browse external
files within an interactive SAS session. You cannot use
the FSLIST procedure to browse SAS data sets.
PROC FSLIST FILEREF=file-specification <option(s)>;
RUN;
Remember to close the FSLIST window when you finish
browsing your external file.

data _null_;
set prog2.maysales;
file 'raw-data-file';
if _N_=1 then
put 'Description ' 'ListDate '
'SellDate ' 'SellPrice';
put Description
ListDate : date9.
SellDate : date9.
SellPrice;
run;

Writing to an External File
data _null_;
set prog2.maysales;
file 'raw-data-file';
put Description
ListDate : date9.
SellDate : date9.
SellPrice;
run;
注意 put语句后format 的冒号

The RETAIN Statement
The RETAIN statement
􀂄 retains the value of the variable in the PDV across
iterations of the DATA step
􀂄 initializes the retained variable to missing before the
first execution of the DATA step if an initial value is
not specified
􀂄 is a compile-time-only statement.

The Sum Statement
When you create an accumulating variable, an alternative
to the RETAIN statement is the sum statement.
General form of the sum statement:
vvaarriaiabblele++ eexxpprreessssioionn;;
���
The sum statement
􀂄 creates the variable on the left side of the plus sign
if it does not already exist
􀂄 initializes the variable to zero before the first iteration
of the DATA step
􀂄 automatically retains the variable
􀂄 adds the value of the expression to the variable at
execution
􀂄 ignores missing values.

data divsals(keep=Div DivSal);
set salsort;
by Div;
if First.Div then DivSal=0;
DivSal+Salary;
if Last.Div;
run;

Specifying an Informat
To specify an informat, use the colon (:) format modifier in
the INPUT statement between the variable name and the
informat.
General form of a format modifier in an INPUT statement:
INPUT vvaarriaiabblele: ininffoorrmmaatt;

Without the Colon
The colon signals that SAS should read from delimiter to
delimiter.
If the colon is omitted, SAS reads the length of the
informat, which may cause it to read past the end of the
field.
􀂄 No error message is printed.
􀂄 You might see invalid data messages or unexpected
data values.

By default, when there is missing data at the end of a row,
1. SAS loads the next record to finish the observation
2. a note is written to the log
3. SAS loads a new record at the top of the DATA step
and continues processing.

The MISSOVER option prevents SAS from loading a new
record when the end of the current record is reached.
General form of the INFILE statement with the
MISSOVER option:
IINNFFIILLEE'r'raaww--ddaattaa--ffiliele''MMIISSSSOOVVEERR;;
If SAS reaches the end of the row without finding values
for all fields, variables without values are set to missing.

The MISSOVER option is also valid in formatted and column input and can be used
when you want to ensure that incomplete fields are set to missing. Suppose there is a
raw data file with the following values:
1
22
333
If the shorter records are not padded with blanks, reading the file with the following
code produces all missing values:
data nums;
infile 'file-name' missover;
input num 4.;
run;
Notice the informat. This specifies that SAS is to look for exactly four bytes of data.
In this case, the MISSOVER option indicates the variable is to be set to missing if the
field is three bytes or less.
The TRUNCOVER option enables SAS to read variable-length records without
setting incomplete fields to missing. If the same raw data file is read with the code
data nums;
infile 'file-name' truncover;
input num 4.;
run;
the resulting values are 1, 22, 333.
When used with list input and without informats, the MISSOVER and
TRUNCOVER options produce the same results.

184

Another INFILE statement option that deals with variable length records is the PAD
option. The PAD option instructs SAS to make all records the same length by adding
spaces to the end of shorter records. All records are padded to either the default
record length or the record length specified by the LRECL= option. It is often used in
the Windows operating environment with column or formatted input to prevent
carriage returns from affecting how raw data is read.
The PAD option is not appropriate for reading delimited files with list input because
it can cause unexpected results. This is especially true if the data is delimited with
spaces or if there is potentially more than one missing field at the end of some rows.

By default, SAS treats two consecutive delimiters as one.
Missing data should be represented by a placeholder.
If your data does not have placeholders, use the DSD
option.
General form of the DSD option in the INFILE statement:
The DSD option
􀂄 sets the default delimiter to a comma
􀂄 treats consecutive delimiters as missing values
􀂄 enables SAS to read values with embedded delimiters
if the value is surrounded by double quotes.

INFILE Statement Options
Problem                           Option
1.Non-blank delimiters          1.DLM='delimiter(s)'
2.Missing data at end of row    2.MISSOVER
3.Missing data represented by
consecutive delimiters
and/or
Embedded delimiters where values
are surrounded by double quotes  3.DSD
These options can be used separately or together in the
INFILE statement.

The SAS System loads a new record into the input buffer
when it encounters an INPUT statement.
You can have multiple INPUT statements in one DATA
step.
Each INPUT statement ends with a semicolon.
DATA SAS-data-set;
INPUT var-1 var-2 var-3;
INPUT var-4 var-5;
additional SAS statements
DATA SAS-data-set;
INPUT var-1 var-2 var

Line Pointer Controls
You can also use line pointer controls to control when
SAS loads a new record.
SAS loads the next record when it encounters a forward
slash.
DATA SAS-data-set;
INPUT var-1 var-2 var-3 / var-4 var-5;
additional SAS statements

data example;
infile 'raw-data-file';
input #1 LName $ FName $
#2 City $ State $
#3 Phone $;
run;


Multiple INPUT statements are needed.
input SalesID $ Location $ @;
if location='USA' then
input SaleDate : mmddyy10.
Amount;
else if Location='EUR' then
input SaleDate : date9.
Amount : commax8.;

The Single Trailing @
The single trailing @ option holds a raw data record in the
input buffer until SAS
􀂄 executes an INPUT statement with no trailing @, or
􀂄 reaches the bottom of the DATA step.

Multiple Observations Per Record
The double trailing @ holds the raw data record across
iterations of the DATA step until the line pointer moves
past the end of the line.
The double trailing @ should only be used with list input. If used with
column or formatted input, an infinite loop can result.












