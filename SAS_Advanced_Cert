SAS_Advanced_Cert

SQL-----
You can create new columns that contain either text or a calculation. New columns will appear in output, along with any existing columns that are selected. Keep in mind that new columns exist only for the duration of the query, unless a table or a view is created. 

You can mix the two types of column references, names and numbers, in the ORDER BY clause. For example, the preceding ORDER BY clause could be rewritten as follows:

     order by 2,empid;

This type of join is known as an inner join. An inner join returns a result set for all of the rows in a table that have one or more matching rows in another table. 


 If you join tables that don't contain one or more columns with matching data values, you can produce a huge amount of output. 

If you specify a GROUP BY clause in a query that does not contain a summary function, your clause is changed to an ORDER BY clause, and a message to that effect is written to the SAS log.

Because the CREATE TABLE statement is used, this query does not create a report. The SAS log verifies that the table was created and indicates how many rows and columns the table contains. 

---
You do not use a RUN statement with the SQL procedure.


Do not end a clause with a semicolon unless it is the last clause in the statement.


When you join multiple tables, be sure to specify columns that have matching data values in the WHERE clause in order to avoid unwanted combinations.


To end the SQL procedure, you can submit another PROC step, a DATA step, or a QUIT statement.
----



 Complete the following PROC SQL query to select the columns Address and SqFeet from the table List.Size and to select Price from the table List.Price. (Only the Address column appears in both tables.) 
proc sql;
   _____________
       from list.size,list.price;
a. select address,sqfeet,price 
b. select size.address,sqfeet,price  
c. select price.address,sqfeet,price 
d. either b or c  


Correct answer:   b 
 
  Your answer:  d 
  
The SELECT clause lists the columns from both tables to be queried. You must use a prefix with the Address column because it appears in both tables. The prefix specifies the table from which you want the column to be read.  

 
Which statement is true regarding the use of the PROC SQL step to query data that is stored in two or more tables? 
a. When you join multiple tables, the tables must contain a common column. 
b. You must specify the table from which you want each column to be read. 
c. The tables that are being joined must be from the same type of data source. 
d. If two tables that are being joined contain a same-named column, then you must specify the table from which you want the column to be read. 


Correct answer:  d
 
  Your answer:  b 
  
If you are joining two tables that contain a same-named column, then you must use a prefix to specify the table(s) from which you want the column to be read. Remember that if you join tables that don't contain columns that have matching data values, you can produce a huge amount of output. Be sure to specify a WHERE clause to select only the rows that you want.   


--------------------------------------------------------------------------------

 
 10.  

 Which clause in the following program is incorrect? 
proc sql;
   select sex,mean(weight) as avgweight
      from company.employees company.health
      where employees.id=health.id
      group by sex;
a. SELECT 
b. FROM 
c. WHERE 
d. GROUP BY 


Correct answer:   b 
 
  Your answer:  a 
  
The table names that are specified in the FROM clause must be separated by commas. Note that you can specify columns in the WHERE clause that are not specified in the SELECT clause.  

 
---------------------------


Using the FEEDBACK Option

When you specify SELECT *, you can also use the FEEDBACK option in the PROC SQL statement, which writes the expanded list of columns to the SAS log. For example, the PROC SQL query shown below contains the FEEDBACK option:


     proc sql feedback;
        select *
           from sasuser.staffchanges;
This query produces the following feedback in the SAS log.


When you create PROC SQL queries, you will sometimes find it useful to limit the number of rows that PROC SQL displays in the output. To indicate the maximum number of rows to be displayed, you can use the OUTOBS= option in the PROC SQL statement. OUTOBS= is similar to the OBS= data set option.


General form, PROC SQL statement with OUTOBS= option:
PROC SQL OUTOBS=n;
where n specifies the the number of rows. 

     The OUTOBS= option restricts the rows that are displayed, but not the rows that are read. To restrict the number of rows that PROC SQL takes as input from any single source, use the INOBS= option. For more information about the INOBS= option, see the lesson Managing Processing Using PROC SQL.


     The OUTOBS= and INOBS= options will affect tables that are created by using the CREATE TABLE statement and your report output.

	In many of the examples in this lesson, OUTOBS= is used to limit the number of rows that are displayed in output.

----
Note that you do not have to specify the keyword CALCULATED in a HAVING clause; you would have to specify it in a WHERE clause.

When you are building a PROC SQL query, you might find it more efficient to check your query without actually executing it. To verify the syntax and the existence of columns and tables that are referenced in the query without executing the query, use either of the following:

the NOEXEC option in the PROC SQL statement
the VALIDATE keyword before a SELECT statement.
---

The following PROC SQL query displays the items from a library that have the highest circulation (that is, are checked out most frequently). The query uses the table Library.Inventory. In this table, Circulation indicates the total number of times that the item has been checked out.
proc sql;
title 'Library Items with ';
title2 'Circulation Above Average';
   select title, author, type, 
          category, circulation
      from library.inventory
      having circulation > avg(circulation)
      order by 4;
Which statement describes a problem with this query?

a.	A summary function cannot be used in a HAVING clause.
b.	In the HAVING clause, the keyword CALCULATED should be added prior to the summary function AVG.
c.	Because there is no GROUP BY statement, the HAVING clause should be a WHERE clause.
d.	The SELECT clause list must include all columns or expressions listed in the HAVING clause, so avg(circulation) should be added to the SELECT clause.
Correct answer:   c

Your answer:  a

The third statement indicates the problem with this PROC SQL query. A HAVING clause subsets groups, not individual rows, so it must be used with a GROUP BY clause. PROC SQL will execute this query, but it will interpret the HAVING clause as a WHERE clause. The output of the query might not be what was expected.  

----

PROC SQL will not perform a join unless the columns that are compared in the join condition (in this example, One.X and Two.X) have the same data type. 


By default, PROC SQL joins do not overlay columns with the same name. Instead, the output displays all columns that have the same name. 

---

In most cases, generating all possible combinations of rows from multiple tables does not yield useful results, so a Cartesian product is rarely the query outcome that you want. 

You can combine a maximum of 32 tables in a single inner join. (If the join involves views, it is the number of tables that underlie the views, not the number of views, that counts towards the limit of 32.) An outer join can be performed on only two tables or views at a time.

---

Which statement about the use of table aliases is false?
a.	Table aliases must be used when referencing identical table names from different libraries.
b.	Table aliases can be referenced by using the keyword AS.
c.	Table aliases (or full table names) must be used when referencing a column name that is the same in two or more tables.
d.	Table aliases must be used when using summary functions.
Correct answer:   d

Your answer:  a

The use of summary functions does not require the use of table aliases. All of the other statements about table aliases that are shown here are true.  
--

A Cartesian product is returned when
a.	
join conditions are not specified in a PROC SQL join.

b.	 join conditions are not specified in a PROC SQL set operation.
c.	more than two tables are specified in a PROC SQL join.
d.	the keyword ALL is used with the OUTER UNION operator.
Correct answer:   a

Your answer:  a

A Cartesian product is returned when join conditions are not specified in a PROC SQL join. In a Cartesian product, each row from the first table is combined with every row from the second table.

--

When processing a set operation that displays only unique rows (a set operation that contains the set operator EXCEPT, INTERSECT, or UNION), PROC SQL makes two passes through the data, by default:

PROC SQL eliminates duplicate (nonunique) rows in the tables.

PROC SQL selects the rows that meet the criteria and, where requested, overlays columns.
For set operations that display both unique and duplicate rows, only one pass through the data (step 2 above) is required.


In order to be overlaid, columns in the same relative position in the two SELECT clauses must have the same data type. If they do not, PROC SQL generates a warning message in the SAS log and stops executing. For example, in the tables shown above, if the column One.X had a different data type than column Two.X, the SAS log would display the following error message.

--

     proc sql;
        select *
           from table1
        set-operator <all> <corr> 
        select *
           from table2;

-
ALL	
Makes only one pass through the data and does not remove duplicate rows.

-
CORR (or CORRESPONDING)	
Compares and overlays columns by name instead of by position:

When used with EXCEPT, INTERSECT, and UNION, removes any columns that do not have the same name in both tables.

When used with OUTER UNION, overlays same-named columns and displays columns that have nonmatching names without overlaying.
	If an alias is assigned to a column in the SELECT clause, CORR will use the alias instead of the permanent column name.
Two tables have some or all columns in common, but the columns are not in the same order.

---

To select all rows in the first table (both unique and duplicate) that do not have a matching row in the second table, add the keyword ALL after the EXCEPT set operator. 

proc sql;
   select *
      from one
   except all
   select *
      from two;


---


Using the Keyword CORR with the EXCEPT Operator

To display both of the following

only columns that have the same name
all unique rows in the first table that do not appear in the second table

proc sql;
   select *
      from one
   except corr
   select *
      from two;

----

Using the Keywords ALL and CORR with the EXCEPT Operator

If the keywords ALL and CORR are used together, the EXCEPT operator will display all unique and duplicate rows in the first table that do not appear in the second table, and will overlay and display only columns that have the same name.

proc sql;
   select *
      from one
   except all corr
   select *
      from two;

---
When processing set operators, PROC SQL follows a default order of precedence, unless this order is overridden by parentheses in the expression(s). By default, INTERSECT is evaluated first. OUTER UNION, UNION, and EXCEPT all have the same level of precedence. 

-

 

 Which PROC SQL step generates the following output from the tables Dogs and Pets?

Dogs
Name Price 
FIFI $101 
GEORGE $75 
SPARKY $136 
TRUFFLE $250 
 Pets
Name Price Arr 
ANA $25 09JAN2002 
FIFI $101 14MAR2002 
GAO $57 08DEC2001 
GAO $57 08DEC2001 
SPARKY $136 16SEP2002 
TRUFFLE $250 20DEC2002 
ZEUS $500 08JUN2002 
 Name Price 
ANA $25 
GAO $57 
ZEUS $500 
 

a. proc sql;
   select name, price
      from pets 
   except all
   select *
      from dogs;

 
b. proc sql;
   select name, price
      from pets 
   except
   select *
      from dogs;

 
c. proc sql;
   select name, price
      from pets 
   except corr all
   select *
      from dogs;

 
d. proc sql;
   select *
      from dogs 
   except corr
   select name, price
      from pets;

 


Correct answer:   b 
 
  Your answer:  d 
  
This PROC SQL output includes all rows from the table Pets that do not appear in the table Dogs. No duplicates are displayed. A PROC SQL set operation that contains the set operator EXCEPT without keywords produces these results.  
 
--
