SAS_Advanced_Cert

SQL-----
You can create new columns that contain either text or a calculation. New columns will appear in output, along with any existing columns that are selected. Keep in mind that new columns exist only for the duration of the query, unless a table or a view is created. 

You can mix the two types of column references, names and numbers, in the ORDER BY clause. For example, the preceding ORDER BY clause could be rewritten as follows:

     order by 2,empid;

This type of join is known as an inner join. An inner join returns a result set for all of the rows in a table that have one or more matching rows in another table. 


 If you join tables that don't contain one or more columns with matching data values, you can produce a huge amount of output. 

If you specify a GROUP BY clause in a query that does not contain a summary function, your clause is changed to an ORDER BY clause, and a message to that effect is written to the SAS log.

Because the CREATE TABLE statement is used, this query does not create a report. The SAS log verifies that the table was created and indicates how many rows and columns the table contains. 

---
You do not use a RUN statement with the SQL procedure.


Do not end a clause with a semicolon unless it is the last clause in the statement.


When you join multiple tables, be sure to specify columns that have matching data values in the WHERE clause in order to avoid unwanted combinations.


To end the SQL procedure, you can submit another PROC step, a DATA step, or a QUIT statement.
----



 Complete the following PROC SQL query to select the columns Address and SqFeet from the table List.Size and to select Price from the table List.Price. (Only the Address column appears in both tables.) 
proc sql;
   _____________
       from list.size,list.price;
a. select address,sqfeet,price 
b. select size.address,sqfeet,price  
c. select price.address,sqfeet,price 
d. either b or c  


Correct answer:   b 
 
  Your answer:  d 
  
The SELECT clause lists the columns from both tables to be queried. You must use a prefix with the Address column because it appears in both tables. The prefix specifies the table from which you want the column to be read.  

 
Which statement is true regarding the use of the PROC SQL step to query data that is stored in two or more tables? 
a. When you join multiple tables, the tables must contain a common column. 
b. You must specify the table from which you want each column to be read. 
c. The tables that are being joined must be from the same type of data source. 
d. If two tables that are being joined contain a same-named column, then you must specify the table from which you want the column to be read. 


Correct answer:  d
 
  Your answer:  b 
  
If you are joining two tables that contain a same-named column, then you must use a prefix to specify the table(s) from which you want the column to be read. Remember that if you join tables that don't contain columns that have matching data values, you can produce a huge amount of output. Be sure to specify a WHERE clause to select only the rows that you want.   


--------------------------------------------------------------------------------

 
 10.  

 Which clause in the following program is incorrect? 
proc sql;
   select sex,mean(weight) as avgweight
      from company.employees company.health
      where employees.id=health.id
      group by sex;
a. SELECT 
b. FROM 
c. WHERE 
d. GROUP BY 


Correct answer:   b 
 
  Your answer:  a 
  
The table names that are specified in the FROM clause must be separated by commas. Note that you can specify columns in the WHERE clause that are not specified in the SELECT clause.  

 
---------------------------


Using the FEEDBACK Option

When you specify SELECT *, you can also use the FEEDBACK option in the PROC SQL statement, which writes the expanded list of columns to the SAS log. For example, the PROC SQL query shown below contains the FEEDBACK option:


     proc sql feedback;
        select *
           from sasuser.staffchanges;
This query produces the following feedback in the SAS log.


When you create PROC SQL queries, you will sometimes find it useful to limit the number of rows that PROC SQL displays in the output. To indicate the maximum number of rows to be displayed, you can use the OUTOBS= option in the PROC SQL statement. OUTOBS= is similar to the OBS= data set option.


General form, PROC SQL statement with OUTOBS= option:
PROC SQL OUTOBS=n;
where n specifies the the number of rows. 

     The OUTOBS= option restricts the rows that are displayed, but not the rows that are read. To restrict the number of rows that PROC SQL takes as input from any single source, use the INOBS= option. For more information about the INOBS= option, see the lesson Managing Processing Using PROC SQL.


     The OUTOBS= and INOBS= options will affect tables that are created by using the CREATE TABLE statement and your report output.

	In many of the examples in this lesson, OUTOBS= is used to limit the number of rows that are displayed in output.

----
Note that you do not have to specify the keyword CALCULATED in a HAVING clause; you would have to specify it in a WHERE clause.

When you are building a PROC SQL query, you might find it more efficient to check your query without actually executing it. To verify the syntax and the existence of columns and tables that are referenced in the query without executing the query, use either of the following:

the NOEXEC option in the PROC SQL statement
the VALIDATE keyword before a SELECT statement.
---

The following PROC SQL query displays the items from a library that have the highest circulation (that is, are checked out most frequently). The query uses the table Library.Inventory. In this table, Circulation indicates the total number of times that the item has been checked out.
proc sql;
title 'Library Items with ';
title2 'Circulation Above Average';
   select title, author, type, 
          category, circulation
      from library.inventory
      having circulation > avg(circulation)
      order by 4;
Which statement describes a problem with this query?

a.	A summary function cannot be used in a HAVING clause.
b.	In the HAVING clause, the keyword CALCULATED should be added prior to the summary function AVG.
c.	Because there is no GROUP BY statement, the HAVING clause should be a WHERE clause.
d.	The SELECT clause list must include all columns or expressions listed in the HAVING clause, so avg(circulation) should be added to the SELECT clause.
Correct answer:   c

Your answer:  a

The third statement indicates the problem with this PROC SQL query. A HAVING clause subsets groups, not individual rows, so it must be used with a GROUP BY clause. PROC SQL will execute this query, but it will interpret the HAVING clause as a WHERE clause. The output of the query might not be what was expected.  

----

PROC SQL will not perform a join unless the columns that are compared in the join condition (in this example, One.X and Two.X) have the same data type. 


By default, PROC SQL joins do not overlay columns with the same name. Instead, the output displays all columns that have the same name. 

---

In most cases, generating all possible combinations of rows from multiple tables does not yield useful results, so a Cartesian product is rarely the query outcome that you want. 

You can combine a maximum of 32 tables in a single inner join. (If the join involves views, it is the number of tables that underlie the views, not the number of views, that counts towards the limit of 32.) An outer join can be performed on only two tables or views at a time.

---

Which statement about the use of table aliases is false?
a.	Table aliases must be used when referencing identical table names from different libraries.
b.	Table aliases can be referenced by using the keyword AS.
c.	Table aliases (or full table names) must be used when referencing a column name that is the same in two or more tables.
d.	Table aliases must be used when using summary functions.
Correct answer:   d

Your answer:  a

The use of summary functions does not require the use of table aliases. All of the other statements about table aliases that are shown here are true.  
--

A Cartesian product is returned when
a.	
join conditions are not specified in a PROC SQL join.

b.	 join conditions are not specified in a PROC SQL set operation.
c.	more than two tables are specified in a PROC SQL join.
d.	the keyword ALL is used with the OUTER UNION operator.
Correct answer:   a

Your answer:  a

A Cartesian product is returned when join conditions are not specified in a PROC SQL join. In a Cartesian product, each row from the first table is combined with every row from the second table.

--

When processing a set operation that displays only unique rows (a set operation that contains the set operator EXCEPT, INTERSECT, or UNION), PROC SQL makes two passes through the data, by default:

PROC SQL eliminates duplicate (nonunique) rows in the tables.

PROC SQL selects the rows that meet the criteria and, where requested, overlays columns.
For set operations that display both unique and duplicate rows, only one pass through the data (step 2 above) is required.


In order to be overlaid, columns in the same relative position in the two SELECT clauses must have the same data type. If they do not, PROC SQL generates a warning message in the SAS log and stops executing. For example, in the tables shown above, if the column One.X had a different data type than column Two.X, the SAS log would display the following error message.

--

     proc sql;
        select *
           from table1
        set-operator <all> <corr> 
        select *
           from table2;

-
ALL	
Makes only one pass through the data and does not remove duplicate rows.

-
CORR (or CORRESPONDING)	
Compares and overlays columns by name instead of by position:

When used with EXCEPT, INTERSECT, and UNION, removes any columns that do not have the same name in both tables.

When used with OUTER UNION, overlays same-named columns and displays columns that have nonmatching names without overlaying.
	If an alias is assigned to a column in the SELECT clause, CORR will use the alias instead of the permanent column name.
Two tables have some or all columns in common, but the columns are not in the same order.

---

To select all rows in the first table (both unique and duplicate) that do not have a matching row in the second table, add the keyword ALL after the EXCEPT set operator. 

proc sql;
   select *
      from one
   except all
   select *
      from two;


---


Using the Keyword CORR with the EXCEPT Operator

To display both of the following

only columns that have the same name
all unique rows in the first table that do not appear in the second table

proc sql;
   select *
      from one
   except corr
   select *
      from two;

----

Using the Keywords ALL and CORR with the EXCEPT Operator

If the keywords ALL and CORR are used together, the EXCEPT operator will display all unique and duplicate rows in the first table that do not appear in the second table, and will overlay and display only columns that have the same name.

proc sql;
   select *
      from one
   except all corr
   select *
      from two;

---
When processing set operators, PROC SQL follows a default order of precedence, unless this order is overridden by parentheses in the expression(s). By default, INTERSECT is evaluated first. OUTER UNION, UNION, and EXCEPT all have the same level of precedence. 

-

 

 Which PROC SQL step generates the following output from the tables Dogs and Pets?

Dogs
Name Price 
FIFI $101 
GEORGE $75 
SPARKY $136 
TRUFFLE $250 
 Pets
Name Price Arr 
ANA $25 09JAN2002 
FIFI $101 14MAR2002 
GAO $57 08DEC2001 
GAO $57 08DEC2001 
SPARKY $136 16SEP2002 
TRUFFLE $250 20DEC2002 
ZEUS $500 08JUN2002 
 Name Price 
ANA $25 
GAO $57 
ZEUS $500 
 

a. proc sql;
   select name, price
      from pets 
   except all
   select *
      from dogs;

 
b. proc sql;
   select name, price
      from pets 
   except
   select *
      from dogs;

 
c. proc sql;
   select name, price
      from pets 
   except corr all
   select *
      from dogs;

 
d. proc sql;
   select *
      from dogs 
   except corr
   select name, price
      from pets;

 


Correct answer:   b 
 
  Your answer:  d 
  
This PROC SQL output includes all rows from the table Pets that do not appear in the table Dogs. No duplicates are displayed. A PROC SQL set operation that contains the set operator EXCEPT without keywords produces these results.  
 
--

 Suppose you want to create the empty table Work.Birthdays that contains the following columns:

Name, a character column with a length of 20 
BirthDate, which has a date format 
Salary, a numeric column that has a comma10.2 format and a width of 8 bytes. 
Which of the PROC SQL steps shown below will create the table exactly as it is described above? Select the best answer.

 
  proc sql;
   create table work.birthdays
          name char(20), 
          Birthdate date,
          Salary decimal(8) format=comma10.2;
  
  proc sql; 
   create table work.birthdays 
          (Name char(20), 
          BirthDate num format=date9. informat=date9.,
          Salary num format=comma10.2);
 
  proc sql;
   create table work.birthdays
          (Name varchar(20), 
          BirthDate date,
          Salary decimal format=comma10.2);

 
  both of the last two PROC SQL steps
 

The last two PROC SQL steps will both create a table that has the column attributes shown above. Although the two steps specify different data types for the columns Name and Salary, these columns will have the same data types after PROC SQL makes the conversion to SAS data types.
--

 The following PROC SQL step creates a table from a query result: 

     proc sql;
        create table work.scores2 as
           select *
              from scores1;
This PROC SQL step
   
  contains two statements: a CREATE TABLE statement and a SELECT statement.  
  generates both a table and a report. 
  does not generate a message in the SAS log. 
  creates a table that has the same rows and columns as the table Scores1, although the rows may not be in the same order. 

This PROC SQL step creates the table Scores2, which contains the same columns and rows as the table Scores1. Because there is no ORDER BY clause, the rows in the two tables may be in a different order. 

---

Which of the following PROC SQL steps uses valid syntax to insert two rows of data into the table Work.Maindishes? 
  proc sql;
   insert into work.maindishes
      set name='CHICKEN KIEV', 
          cal=762
      set name='FAJITAS', 
          cal=243;
 

----


Modifying Columns in a Table

To modify the attributes of one or more existing columns in a table, use the MODIFY clause in the ALTER TABLE statement. You can use the MODIFY clause to change a column's

length (column width) - for a character column only
informat
format
label.


	Which of the following PROC SQL steps uses invalid syntax to alter the columns of a table?
	
proc sql;
   alter table work.confections
      modify calories num format=7.2
      add Color char(5)
      drop brandname;
	
proc sql;
   alter table work.confections
      modify calories num format=7.2
      add Color char(5),
          PkgCode char(3)
      drop brandname, numstores;
	
proc sql;
   alter table work.confections
      add Color char(5), 
      modify calories num format=7.2,
      drop brandname;
	
proc sql;
   alter table work.confections
      add Age num;



The correct answer is selected.
The ALTER statement can contain one or more of the clauses ADD, DROP, and MODIFY, in any order. When multiple clauses are used, they are not separated by commas.


---

	
In which library is the table Revenue stored?

proc sql;
   create view flights.cargov as             
      select * 
         from revenue;
	Work	
	Flights
	Sasuser


Correct.
The default libref for the table or tables in the FROM clause is the libref of the library that contains the view. Using a one-level name in the FROM clause prevents you from having to change the view if you assign a different libref to the SAS data library that contains the view and its contributing table or tables.


---

Given the following PROC SQL view, which column(s) in State.Data can be updated?

proc sql;
   create view data.state as
      select name as County,
             population/area as Density
         from state.data;
	County	
	Density
	County and Density


The correct answer is selected.
You can update the column Name using the column's alias, County. However, you cannot update the derived column Density.

--

When you use the %LET statement to define macro variables, you should keep in mind the following rules:
All values are stored as character strings.
Mathematical expressions are not evaluated.
The case of the value is preserved.
Quotation marks that enclose literals are stored as part of the value.
Leading and trailing blanks are removed from the value before the assignment is made.

--
Which of the following statements is false?
a.	 A macro variable can be defined and referenced anywhere in a SAS program except within data lines.
b.	 Macro variables are always user-defined, and their values remain constant until they are changed by the user.
c.	 Macro variables are text strings that are independent of SAS data sets.
d.	 The values of macro variables can be up to 65,534 characters long.
Correct answer:   b

Your answer:  d

Macro variables are always text strings that are independent of SAS data sets. The value of a macro variable can be up to 65,534 characters long, and the name of a macro variable can be up to 32 characters long. A macro variable can be defined or referenced anywhere in a SAS program except within data lines. There are two types of macro variables: automatic and user-defined. 

--


Which of the following statements does not correctly display the value of the macro variable month in the SAS log?
a.	options &month;
b.	%PUT &month;
c.	options symbolgen;
d.	%PUT the macro variable MONTH has the value &month. ;
Correct answer:   a

Your answer:  c

There are two ways to display the value of a macro variable in the SAS log: you can turn on the SYMBOLGEN system option to list the values of all macro variables that are used, or you can use the %PUT statement to write specific text, including macro variable values, to the log.   

--

What value will these statements assign to the macro variable reptitle:

%let area = "Southeast";
%let reptitle = *  Sales Report for &area Area  *;   
a.	Sales Report for Southeast Area
b.	Sales Report for "Southeast" Area
c.	*Sales Report for "Southeast" Area*
d.	*  Sales Report for "Southeast" Area  *
Correct answer:   d

Your answer:  d

Macro variables are stored as character strings. Quotation marks and most special characters are stored exactly as they are assigned, but leading blanks are stripped from assigned values. You can also include references to other macro variables within %LET statements. 

----

Which of the following statements about the resolution of macro variable references is false?
a.	Two ampersands resolve to one ampersand.
b.	If more than four consecutive ampersands precede a name token, the macro processor generates an error message.
c.	Re-scanning continues until there are no remaining macro triggers that the macro processor can resolve.
d.	The macro processor always re-scans a name token that is preceded by multiple ampersands or by multiple percent signs.
Correct answer:   c

Your answer:  d

If more than four consecutive ampersands precede a name token, rescanning continues from left to right until no more triggers can be resolved. The Forward Re-scan rule describes how the macro processor resolves macro variable references that start with multiple ampersands or with multiple percent signs. 


------
 
Which of the following is false?
a.	 The SYMPUT routine can be used to create a macro variable during execution of the DATA step or during execution of an SCL program.
b.	 In the DATA step, the SYMPUT routine automatically converts to a character value any numeric value that you attempt to assign as the value of a macro variable.
c.	PROC SQL automatically converts to a numeric value any macro variable value that you attempt to compare to a numeric value.
d.	In an SCL program, the SYMPUTN routine can be used to assign a numeric value to a macro variable.
Correct answer:   c

Your answer:  a

The SYMPUT routine can be used in either the DATA step or in an SCL program. In the DATA step, the SYMPUT routine will perform automatic conversion on numeric values that you attempt to assign as values for macro variables, using the BEST12. format. In an SCL program, you should use the SYMPUTN routine if you want to assign a numeric value as a value for a macro variable. In a PROC SQL step, you need to use the INPUT function in order to convert macro variable values to numeric before you compare them to other numeric values.   

--


If you use a mixed parameter list in your macro program definition, which of the following is false?
a.	You must list positional parameters before any keyword parameters.
b.	Values for both positional and keyword parameters are stored in a local symbol table.
c.	 Default values for keyword parameters are the values that are assigned in the macro definition, whereas positional parameters have a default value of null.
d.	You can assign a null value to a keyword parameter in a call to the macro by omitting the parameter from the call.

Correct answer:  d

Your answer:  a

In a mixed parameter list, positional parameters must be listed before any keyword parameters. Both positional and keyword parameters create macro variables in the local symbol table. To assign a null value to a keyword parameter, you list the parameter without a value in the macro call

--


If you store a macro definition in a SAS catalog SOURCE entry,
a.	 the macro definition can be submitted for compilation by using the FILENAME and %INCLUDE statements.
b.	 you can use the PROC CATALOG statement to compile the macro.
c.	 the SOURCE entry will be deleted at the end of the session.
d.	 you do not need to compile the macro before you invoke it in a program.
Correct answer:  a

Your answer:  c

When a macro definition is stored as a catalog SOURCE entry, you must compile it before you can call it from a SAS program. You compile a macro that is stored as a catalog SOURCE entry by using the CATALOG access method. This creates a session-compiled macro that will be deleted at the end of the SAS session. The PROC CATALOG statement enables you to view a list of the contents of a SAS catalog.  


---

The variable that is created by the POINT= option is assigned a value
a.	automatically during compilation of the DATA step.
b.	automatically during execution of the DATA step.
c.	during compilation of the DATA step, by program statements.
d.	 during execution of the DATA step, by program statements.
Correct answer:   d

Your answer:  d

The POINT= option in the SET statement names a variable. You must use program statements to assign a value to this variable during execution of the DATA step, before execution of the SET statement. Also, the value of the POINT= variable should be a number that corresponds to an observation number in the input data set, and it should be different each time the SET statement executes. 

---

Suppose that the Sasuser.Revenue data set has a simple index named FlightID. For which of the following programs will the index be used?
a.	
proc print data=sasuser.revenue;
   where flightid ne 'IA11200';
run;
b.	
data someflights;
   set sasuser.revenue;
   where flightid > 'IA11200';
run;
c.	
data someflights;
   set sasuser.revenue;
   if flightid > 'IA11200';
run;
d.	
proc print data=sasuser.revenue;
   where origin='RDU' or flightid='IA03400';
run;
Correct answer:   b

Your answer:  a

An index can improve the efficiency with which SAS is able to access certain observations in a data set. However, an index is not always useful. SAS will not use an index to process subsetting IF statements, or other statements that SAS determines might be more efficiently processed without an index.  

---

Which of the following statements is true?
a.	 The FILEVAR= option can be used to dynamically change the currently opened input file to a new physical file.
b.	 The FILEVAR= variable is not written to the data set.
c.	 The FILEVAR= variable must contain a character string that is a physical filename.
d.	  all of the above
Correct answer:  d

Your answer:  a

The FILEVAR= option enables you to dynamically change the currently opened input file to a new input file. The FILEVAR= variable must contain a character string that is a physical filename. Like automatic variables, the FILEVAR= variable is not written to the data set.   

---
According to the data set descriptions below, which of the variables listed qualify as BY variables for a DATA step match-merge?
Variable	Type	Length	Description
Code	char	5	Department code
Totemps	num	3	Total number of employees
Region	char	4	Location of the department
Manager	num	5	Employee ID number
Variable	Type	Length	Description
IDnum	num	5	Employee ID number
Name	char	20	Employee name
Division	char	3	Division abbreviation
Hiredate	num	8	Date of hire
Supervisor	char	20	Name of supervisor
a.	Code and IDnum
b.	Manager and Supervisor
c.	Manager and IDnum
d.	There are no variables that are common to both of these data sets.
Correct answer:   c

Your answer:  c

Remember that common variables might not have the same names. Manager and IDnum are the only two variables listed that match according to type and description. You can use the RENAME= option to rename one of these variables so that they can be used as BY variables in the MERGE statement of the DATA step. 




